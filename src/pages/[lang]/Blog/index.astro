---
import { languages } from "@/i18n/ui";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import ArticleLayout from "@/layouts/ArticleLayout.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Newspaper } from "lucide-react";
import capitalize from "lodash-es/capitalize";

export async function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({ params: { lang } }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const blogPosts = (await getCollection("blog"))
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())
  .map((post) => {
    const [lang, ...slug] = post.slug.split("/");
    return {
      lang,
      slug: slug[0],
      title: post.data.title,
      author: post.data.author,
      description: post.data.description,
      formattedDate: post.data.date.toLocaleDateString(lang, {
        year: "numeric",
        month: "long",
        day: "numeric",
      }),
      url: getRelativeLocaleUrl(lang, `Blog/${slug}`),
      render: post.render,
    };
  })
  .filter((post) => post.lang === lang);

const lastestPostInfo = blogPosts.length
  ? {
      post: blogPosts[0],
      formattedDate: blogPosts[0].formattedDate,
    }
  : null;

const LastestPostContent = lastestPostInfo
  ? (await blogPosts[0].render()).Content
  : null;
---

<BaseLayout>
  <div class="max-w-full w-[65ch] mx-auto">
    <h2 class="text-2xl mb-2 font-bold flex items-baseline gap-2">
      <Newspaper className="text-primary" /> Blog
    </h2>
    <h3 class="text-xl font-bold">{t("blog.posts")}</h3>
    <ScrollArea className="h-48 max-w-full mb-1" client:load>
      {
        blogPosts.map((post, index) => (
          <Card key={index} className="my-2 mx-4 max-w-full md:shadow-none">
            <CardHeader>
              <CardTitle>
                <span class="">{post.title}</span>
                <div class="text-sm font-light">
                  {capitalize(t("article.by"))} {post.author} â€¢{" "}
                  {post.formattedDate}
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="flex flex-col">
              <p>
                {post.description ? post.description : t("blog.no.description")}
              </p>
              <a href={post.url} class="text-blue-600 hover:underline self-end">
                {t("blog.read.more")}
              </a>
            </CardContent>
          </Card>
        ))
      }
    </ScrollArea>
  </div>
  {
    lastestPostInfo && LastestPostContent && (
      <div transition:name="article">
        <ArticleLayout
          transition:name="article"
          tocId={lastestPostInfo.post.slug}
          info={{
            author: "Davide Plastini",
            formattedDate: lastestPostInfo.formattedDate,
          }}
        >
          <div slot="start" class="bg-background sticky top-0">
            <h2 class="text-2xl font-bold pt-2 pb-1" slot="start">
              {t("blog.lastest")}
            </h2>
            <Separator slot="start" />
          </div>
          <LastestPostContent />
        </ArticleLayout>
      </div>
    )
  }
</BaseLayout>
